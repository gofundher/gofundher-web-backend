/**
 * Payoneer API Client.
 *
 * @module Payoneer
 *
 * @todo Complete the documentation.
 */
 const util = require('./utils/DateFormatter');
 const PYRequest = require('./pyrequest');
 
 /**
  * Payoneer API client.
  */
 class Payoneer {
   /**
    * @constructor
    */
   constructor(config) {
     this.pyrequest = new PYRequest(config);
   }
 
   /**
    * Common Payoneer post.
    *
    * @param {string} mname - The method name (eg.: 'GetVersion').
    * @param {Object} parameters - The method parameters.
    *
    * @returns {Promise} A new Promise. If there is no errors, the result
    *                    will be a JavaScript object.
    */
   pyPost(mname, parameters) {
     return new Promise((success, reject) => {
       this.pyrequest.post(mname, parameters).then(function(data) {
         success(data);
       }).catch(function(error) {
         reject(error);
       });
     });
   }
 
   /**
    * Return the status of the API and payout services.
    *
    * @return {Object} Representing API status.
    */
   echo() {
     return this.pyPost('Echo');
   }
 
   /**
    * Return the API version.
    *
    * @return {Object} Representing API version.
    */
   getVersion() {
     return this.pyPost('GetVersion');
   }
    /**
     * Request a unique URL to the payee sign-up page
     * that is generated by Payoneer
     * specifically for each sign-up session. 
     * 
     * @param {string} p4 - Client Payee ID Payee’s Unique ID as used within the client’s system. 
     * @param {string} p5 - Session ID Payee session ID on the client’s Website. If provided, Payoneer sends it back upon process completion (IPCN). 
     * @param {string} p6 - Redirect URL URL used by Payoneer for redirecting the payee back after completion of the signup process. Note that localhost is invalid
     * @param {string} p8 - Redirect Time The delay in seconds between the confirmation pages to the redirection to the client’s URL at the end of the account application. Default is 10 seconds. 
     * @param {string} p10 - XML Response Creates a XML response with the token URL.
     * @param {string} p11 - Payout Methods Lists . List of allowed payout-methods for payees to choose from. The list is separated by commas. By default all payout-methods are presented to payees.
     * @param {string} p12 - Registration Mode . Registration mode. Acceptable value are: “Regular” – the default value. Exposes extended services such as Payoneer’s “MyAccount” application. “Express” - supported only for iACH accounts. “Express” prompts the payee to fill in minimal details to receive payment, but does not include the extended services provided by “Regular” mode “alreadyhaveanaccount” – causes the payee to be redirected to the “Payoneer already have an account” dialog box
     * 
     * @return {Object} Representing token link for signup.
     */
   getToken() {
    return this.pyPost(
        'GetToken',
        { p4, p5, p6, p8, p10, p11, p12 }
      );
   }
   /**
    * Submit a payment request to Payoneer's system.
    *
    * Prior to issuing payment instructions, the client's account balance in
    * Payoneer's system must be credited to cover the instructions requested.
    * Payout instruction submission will fail if the client's account balance
    * does not have sufficient funds to perform the payment instructions. In
    * addition, the payee ID must be active.
    *
    * @param {string} p4 - Program ID.
    * @param {string} p5 - Internal Payment ID.
    * @param {string} p6 - Internal Payee ID.
    * @param {number} p7 - Amount (eg.: 10.00).
    * @param {string} p8 - Description.
    * @param {number} [p9] - Payment Date (eg.: 04/02/2017 12:06:00).
    * @param {string} [p10] - Group ID.
    * @param {string} [currency] - Description, 3 letters (eg.: 'USD').
    *
    * @return {Object} Representing performed payment status.
    */
   sendPayment(p4, p5, p6, p7, p8, ...[p9, p10, currency]) {
     return this.pyPost(
       'PerformPayoutPayment',
       { p4: p4, p5: p5, p6: p6, p7: p7, p8: p8, p9: p9, p10: p10, currency: currency }
     );
   }
 
   /**
    * Report the status of a payment that was previously sent to the Payoneer
    * system.
    *
    * @param {string} p4 - Internal Payee ID.
    * @param {string} p5 - Internal Payment ID.
    *
    * @return {Object} Representing payment status.
    */
   getPaymentStatus(p4, p5) {
     return this.pyPost('GetPaymentStatus', { p4: p4, p5: p5 });
   }
 
   /**
    * Return the client's available account balance.
    *
    * @return {Object} Representing the client's account status.
    */
   getAccountDetails() {
     return this.pyPost('GetAccountDetails');
   }
 
   /**
    * Return details about the requested payee and its status at Payoneer.
    *
    * @param {string} p4 - Payee ID.
    *
    * @return {Object} Representing the payee account details.
    */
   getPayeeDetails(p4) {
     return this.pyPost('GetPayeeDetails', { p4: p4 });
   }
 
   /**
    * Change the ID of an existing payee (old) to a new one.
    *
    * @param {string} p4 - Old Payee ID.
    * @param {string} p5 - New Payee ID.
    *
    * @return {Object} Representing the new Payee ID.
    */
   changePayeeId(p4, p5) {
     return this.pyPost('ChangePayeeID', { p4: p4, p5: p5 });
   }
 
   /**
    * Return all payments made to payees, grouped by a payment method.
    * API call limit is for a 1-month period.
    *
    * @param {integer} [p4=0] - Report Type. Presently only XML is supported (eg.: XML=0 ).
    * @param {Date} p5 - Start Date.
    * @param {Date} p6 - End Date.
    *
    * @return {Object} Representing the report.
    */
   getPayeesReport(p4, p5, p6) {
     let starDate = util.formatDate(p5);
     let endDate = util.formatDate(p6);
 
     return this.pyPost('GetPayeesReport', { p4: p4, p5: starDate, p6: endDate });
   }
 
   /**
    * Return all payments made to a specified payee.
    *
    * @param {string} p4 - Payee ID.
    *
    * @return {Object} Representing the report.
    */
   getSinglePayeeReport(p4) {
     return this.pyPost('GetSinglePayeeReport', { p4: p4 });
   }
 
   /**
    * Return a list of all payments that are unclaimed in XML format.
    *
    * @return {Object} Representing the list of unclaimed payments.
    */
   getUnclaimedPaymentsXml() {
     return this.pyPost('GetUnclaimedPaymentsXML');
   }
 
   /**
    * Cancel a payment that has not been processed and loaded to an account.
    *
    * @param {string} p4 - Internal Payeement ID.
    *
    * @return {Object} Representing status of the transaction.
    */
   cancelPayment(p4) {
     return this.pyPost('CancelPayment', { p4: p4 });
   }
 }
 
 module.exports = Payoneer;